@startuml Board

enum Border {
    O
    NE
    NO
    SE
    SO
}

enum Couleur {
    Rouge
    Bleu
    Jaune
    Vert
    Multicouleurs
}

enum Forme {
    Croix
    Cercle
    Carre
    Triangle
}

class Board {
    - cells : List<Cell>
    - robots : List<Robot>
    - players : List<Player>
    - taille_x : int
    - taille_y : int
    + Board()
    + initializeCells() : void
    + initializeRobots() : void
    + initializePlayers() : void
    + print_plateau() : void
}

class Cell {
    - x : int
    - y : int
    - coordonnees : List<Border>
    - cible : Cible
    + Cell(x: int, y: int)
    + print_cell() : void
}

class Cible {
    - forme : Forme
    - couleur : Couleur
    + Cible(forme: Forme, couleur: Couleur)
}

class Robot {
    - x : int
    - y : int
    - couleur : Couleur
    + Robot(x: int, y: int, couleur: Couleur)
    + deplacement(direction: String) : void
    + setCoordinates(x: int, y: int) : void
    + getCoordinates() : List<int>
    + getColor() : Color
}

class Player {
    - lettre : String
    - points : int
    - droit_buzzer : bool
    - x : int
    - y : int
    + Player(lettre: String)
    + essai(x: int, y: int) : void
}

class SuperviseurJeu {
    - plateau : Board
    - players : List<Player>
    - coups_annonces : List<int>
    - compteurs_coups_reels : List<int>
    - cible_courante : Cible
    - liste_cibles : List<Cible>
    + SuperviseurJeu()
    + init() : void
    + new_tour() : void
    + annoncerNb(player: Player, nombre: int) : void
    + deplacement(robot: Robot, direction: String) : void
    + test_cible_atteinte() : bool
}

Board "1" *-- "256" Cell : contient
Board "1" *-- "4" Robot : possède
Board "1" *-- "*" Player : possède
Cell --> Border : utilise
Cell "0..1" *-- "1" Cible : possède
Robot --> Couleur : utilise
Cible --> Couleur : utilise
Cible --> Forme : utilise
SuperviseurJeu *-- Board : contrôle
SuperviseurJeu *-- Player : gère
SuperviseurJeu *-- Cible : utilise

@enduml
